def is_prime(number)
  return false if number <= 1
  return true if number <= 3
  return false if (number % 2 == 0) || (number % 3 == 0)
  i = 5
  while i * i <= number
    return false if (number % i == 0) || (number % (i + 2) == 0)
    i += 6
  end
  return true
end

def generate_prime_values(sequence)
  prime_values = {}
  counts = Hash.new(0)
  sequence.each { |number| counts[number] += 1 }

  counts.each do |number, count|
    prime_values[number] = count if is_prime(count)
  end

  prime_values
end

def filter_sequence(a, b)
  prime_values = generate_prime_values(b)
  c = []
  a.each do |number|
    if prime_values.key?(number) && prime_values[number] > 0
      prime_values[number] -= 1
    else
      c.push(number)
    end
  end
  c
end


A = [2, 3, 9, 2, 5, 1, 3, 7, 10]
B = [2, 1, 3, 4, 3, 10, 6, 6, 1, 7, 10, 10, 10]
C = filter_sequence(A, B)
puts C.inspect #[2, 9, 2, 5, 7, 10]
